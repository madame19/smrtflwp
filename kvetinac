#include <Wire.h>   
#include <U8g2lib.h>   // knihovna pro monitor 
#include <Adafruit_Sensor.h>   //
#include <Adafruit_BME680.h>   /knihovna pro bme
#include <WiFi.h>   // knihovna pro wifi
#include <NTPClient.h>   //knihovna pro datum
#include <WiFiUdp.h>   //knihovna pro wifi
#include <TimeLib.h>   // knihovna pro čas
#include <Adafruit_NeoPixel.h>   // knihovna pro ledky
#include <ThingSpeak.h> // knihovna pro ThingSpeak   

// Nastavení pro WiFi   

const char* ssid     = "Leona - iPhone";      // nastaveni wifi  
const char* password = "kupsidata";    

U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, U8X8_PIN_NONE); // Nastavení pro display s HW I2C   

// Nastavení pro BME680   
Adafruit_BME680 bme;   

// Nastavení pro NTP klienta   
WiFiUDP ntpUDP;   
NTPClient timeClient(ntpUDP, "pool.ntp.org", 3629, 60000); // 3600 sekund = UTC +1 hodina pro CET   

// Nastavení pro NeoPixel LED pásek   
#define PIN            5    // Pin, na který je připojený led pásek   
#define NUMPIXELS      8    // Počet LED na pásku   
Adafruit_NeoPixel strip(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800); // Inicializace NeoPixel pásku   

// Nastavení pinu pro tlačítko   
#define BUTTON_PIN     0    // Tlačítko připojeno na pin 0   
   
#define WATER_SENSOR_PIN 4  // Pin pro připojení senzoru HW-038   
  
#define PUMP_PIN 17         // Pin pro připojení čerpadla   

#define SOIL_MOISTURE_PIN 34 // Pin pro připojení senzoru vlhkosti půdy   
bool waterDetected = true;    
unsigned long lastSwitchTime = 0;  // Čas posledního přepnutí zobrazení   
bool displayWarning = false;  // promena pro střídání zobrazení   
bool systemActive = false; // promena pro aktivaci systému po stisknutí tlačítka   
   
const char *thingSpeakAPIKey = "CRSCZVW9SI8W34V8";  //API klíč   
unsigned long channelID = 2828386; //Channel ID  

WiFiClient client;   
void setup() {   
  Serial.begin(115200);   
  Wire.begin();   
  
// Inicializace displeje   
  u8g2.begin();   
  
// Inicializace NeoPixel pásku   
  strip.begin();   
  strip.setBrightness(215); // Nastavení jasu    
  strip.show(); // Inicializuje pásky, nastaví je na "vypnuto"   
  
// Nastavení tlačítka jako vstup   
  pinMode(BUTTON_PIN, INPUT_PULLUP);  // Vstupní pin s interním pull-up odporem   
  pinMode(WATER_SENSOR_PIN, INPUT);   // Nastavení pinu pro senzor vody na vstup 
  pinMode(PUMP_PIN, OUTPUT);          // Nastavení pinu pro čerpadlo jako výstup   
  digitalWrite(PUMP_PIN, LOW);        // Vypnutí čerpadla na začátku   
    
  while (digitalRead(BUTTON_PIN) == HIGH) {   // Čekáme, dokud není tlačítko stisknuto   
    u8g2.clearBuffer();   
    u8g2.setFont(u8g2_font_ncenB08_tr);   
    u8g2.setCursor(10, 30);   
    u8g2.print("Stisknete tlacitko...");   
    u8g2.sendBuffer();   
    delay(100);   
  }   
  
// Jakmile je tlačítko stisknuto, systém se aktivuje   
  systemActive = true;   
  
// Připojení k WiFi   
  WiFi.begin(ssid, password);   
  while (WiFi.status() != WL_CONNECTED) {   
    delay(1000);   
    Serial.println("Pripojuji se k WiFi...");   
  }   
  Serial.println("Pripojeno k WiFi");  
  
// Inicializace NTP klienta pro získání času   
  timeClient.begin();   
  
// Čekáme, než NTP získá čas   
  while (!timeClient.update()) {   
    Serial.println("čekám na aktualizaci času...");   
    delay(1000);   
  }   
  
// Nastavení času pro TimeLib   
  setTime(timeClient.getEpochTime()); // Nastavení času z NTP klienta   
  Serial.println("NTP synchronizováno!");   
 
// Inicializace BME680   
  if (!bme.begin()) {   
    Serial.println("Nepodařilo se inicializovat BME680!");   
    while (1);   
  }   
 
// Inicializace ThingSpeak   
  ThingSpeak.begin(client);   
}   
void loop() {   
  
// Pokud systém ještě není aktivní, nic neděláme   
  if (!systemActive) {   
    return;   
  }   
  
// Čteme stav senzoru HW-038    
  waterDetected = (digitalRead(WATER_SENSOR_PIN) == LOW);  // nastavení hw-038  
  
// Čteme hodnotu vlhkosti půdy   
  int soilMoisture = analogRead(SOIL_MOISTURE_PIN);   
  Serial.print("Vlhkost půdy: ");   
  Serial.println(soilMoisture);  
  
// Pokud je vlhkost půdy větší než 1500 a je voda v zásobníku, spustíme čerpadlo   
  if (soilMoisture > 1500 && !waterDetected) {   
    digitalWrite(PUMP_PIN, HIGH); // Zapnutí čerpadla   
    delay(8000); // Čerpadlo běží 8 sekund   
    digitalWrite(PUMP_PIN, LOW);  // Vypnutí čerpadla   
  }   
 
// Aktualizace času   
  timeClient.update();   

// Pokud neni detekována voda, přepneme na režim varování   
  if (waterDetected) {   

// Zobrazíme hlášení o došlé vodě   
    u8g2.clearBuffer();   
    u8g2.setFont(u8g2_font_ncenB08_tr);   
    u8g2.setCursor(2, 32);   
    u8g2.print("Prazdny zasobnik vody!");   
    
// Zobrazení aktuálního času   
    u8g2.setFont(u8g2_font_5x8_tr);  
    u8g2.setCursor(2, 10);  
    u8g2.print(timeClient.getFormattedTime());   
   
// Zobrazení aktuálního data   
    u8g2.setCursor(90, 10);  
    u8g2.print(day());   
    u8g2.print("/");   
    u8g2.print(month());    
    u8g2.print("/");   
      
    int yearShort = year() % 100;   
    u8g2.print(yearShort);   
    u8g2.sendBuffer();   
    
// LED pásek bude červený  
    for (int i = 0; i < NUMPIXELS; i++) {   
      strip.setPixelColor(i, strip.Color(255, 0, 0)); // Červená barva pro varování   
    }   
    strip.show();  // Aplikování změn na LED pásek   
  } else {   
    
// Zobrazíme původní informace z BME680 a čas   
    if (bme.performReading()) {   
      u8g2.clearBuffer();   
      u8g2.setFont(u8g2_font_5x8_tr);    
      u8g2.setCursor(2, 10);    
      u8g2.print(timeClient.getFormattedTime());      
      u8g2.setCursor(90, 10);  
      u8g2.print(day());  
      u8g2.print("/");   
      u8g2.print(month());   
      u8g2.print("/");   
       
      int yearShort = year() % 100;   
      u8g2.print(yearShort);   
      
// Zobrazení údajů z BME680  
      u8g2.setFont(u8g2_font_5x8_tr);    
      u8g2.setCursor(5, 30);   
      u8g2.print("Teplota vzduchu: ");   
      u8g2.print(bme.temperature);   
      u8g2.print(" C");   
      u8g2.setCursor(5, 40);   
      u8g2.print("Vlhkost vzduchu: ");   
      u8g2.print(bme.humidity);   
      u8g2.print(" %");   
      u8g2.setCursor(5, 50);   
      u8g2.print("Tlak: ");   
      u8g2.print(bme.pressure / 100.0);   
      u8g2.print(" hPa");   
      u8g2.setCursor(5, 60);   
      u8g2.print("Plyn: ");   
      u8g2.print(bme.gas_resistance / 1000.0);   
      u8g2.print(" kOhms");     
      u8g2.sendBuffer();   
      
// Odesílání dat na ThingSpeak   
      ThingSpeak.setField(1, (float)bme.temperature);     // Pole 1 - teplota   
      ThingSpeak.setField(2, (float)bme.humidity);        // Pole 2 - vlhkost   
      ThingSpeak.setField(3, (float)(bme.pressure / 100.0)); // Pole 3 - tlak   
      ThingSpeak.setField(4, (float)(bme.gas_resistance / 1000.0)); // Pole 4 - plyn  
     
      int status = ThingSpeak.writeFields(channelID, thingSpeakAPIKey);   
      if (status == 200) {   
        Serial.println("Data byla odeslána na ThingSpeak.");   
      } else {   
        Serial.println("Chyba při odesílání dat na ThingSpeak.");  
      }   
    } else {   
 
      u8g2.clearBuffer();   
      u8g2.setCursor(0, 10);   
      u8g2.print("Chyba pri cteni!");   
      u8g2.sendBuffer();   
    }   
    // LED pásek bude bílý    
    for (int i = 0; i < NUMPIXELS; i++) {   
      strip.setPixelColor(i, strip.Color(255, 255, 255)); 
    }   
    strip.show();   
  }   
  delay(300000);  // Pošle data každých 5 minut  
} 
